[{"t":"Artisan","d":"# Artisan\n\n    // 针对命令显示帮助信息\n    php artisan --help OR -h\n    // 抑制输出信息\n    php artisan --quiet OR -q\n    // 打印 Laravel 的版本信息\n    php artisan --version OR -V\n    // 不询问任何交互性的问题\n    php artisan --no-interaction OR -n\n    // 强制输出 ANSI 格式\n    php artisan --ansi\n    // 禁止输出 ANSI 格式\n    php artisan --no-ansi\n    // 显示当前命令行运行的环境\n    php artisan --env\n    // -v|vv|vvv 通过增加 v 的个数来控制命令行输出内容的详尽情况: 1 个代表正常输出, 2 个代表输出更多消息, 3 个代表调试\n    php artisan --verbose\n    // 移除编译优化过的文件 (storage/frameworks/compiled.php)\n    php artisan clear-compiled\n    // 显示当前框架运行的环境\n    php artisan env\n    // 显示某个命令的帮助信息\n    php artisan help\n    // 显示所有可用的命令\n    php artisan list\n    // 进入应用交互模式\n    php artisan tinker\n    // 配合 dump() 函数调试数据\n    php artisan dump-server\n    // 进入维护模式\n    php artisan down\n    // 退出维护模式\n    php artisan up\n    // 优化框架性能\n     // --force    强制编译已写入文件 (storage/frameworks/compiled.php)\n     // --psr      不对 Composer 的 dump-autoload 进行优化\n    php artisan optimize [--force] [--psr]\n    // 更改前端预设\n    // type_name (可以是 none, bootstrap, vue, react)\n    php artisan preset [options] [--] type_name\n    // 启动内置服务器\n    php artisan serve\n    // 更改默认端口\n    php artisan serve --port 8080\n    // 使其在本地服务器外也可正常工作\n    php artisan serve --host 0.0.0.0\n    // 更改应用命名空间\n    php artisan app:name namespace\n    // 清除过期的密码重置令牌\n    php artisan auth:clear-resets\n\n    // 清空应用缓存\n    php artisan cache:clear\n    // 移除 key_name 对应的缓存\n    php artisan cache:forget key_name [<store>]\n    // 创建缓存数据库表 migration\n    php artisan cache:table\n\n    // 合并所有的配置信息为一个，提高加载速度\n    php artisan config:cache\n    // 移除配置缓存文件\n    php artisan config:clear\n\n    // 程序内部调用 Artisan 命令\n    $exitCode = Artisan::call('config:cache');\n    // 运行所有的 seed 假数据生成类\n     // --class      可以指定运行的类，默认是: \"DatabaseSeeder\"\n     // --database   可以指定数据库\n     // --force      当处于生产环境时强制执行操作\n    php artisan db:seed [--class[=\"...\"]] [--database[=\"...\"]] [--force]\n\n    // 基于注册的信息，生成遗漏的 events 和 handlers\n    php artisan event:generate\n    // 罗列所有事件和监听器\n    php artisan event:list\n    // 缓存事件和监听器\n    php artisan event:cache\n    // 清除事件和监听器缓存\n    php artisan event:clear\n\n    // 生成新的处理器类\n     // --command      需要处理器处理的命令类名字\n    php artisan handler:command [--command=\"...\"] name\n    // 创建一个新的时间处理器类\n     // --event        需要处理器处理的事件类名字\n     // --queued       需要处理器使用队列话处理的事件类名字\n    php artisan handler:event [--event=\"...\"] [--queued] name\n\n    // 生成应用的 key（会覆盖）\n    php artisan key:generate\n\n    // 发布本地化翻译文件到 resources 文件下\n    // locales: 逗号分隔，如 zh_CN,tk,th [默认是: \"all\"]\n    php artisan lang:publish [options] [--] [<locales>]\n\n    // 创建用户认证脚手架\n    php artisan make:auth\n    // 创建 Channel 类\n    php artisan make:channel name\n    // 在默认情况下, 这将创建未加入队列的自处理命令\n     // 通过 --handler 标识来生成一个处理器, 用 --queued 来使其入队列.\n    php artisan make:command [--handler] [--queued] name\n    // 创建一个新的 Artisan 命令\n     //  --command     命令被调用的名称。 (默认为: \"command:name\")\n    php artisan make:console [--command[=\"...\"]] name\n    // 创建一个新的资源控制器\n     // --plain      生成一个空白的控制器类\n    php artisan make:controller [--plain] name\n    php artisan make:controller App\\\\Admin\\\\Http\\\\Controllers\\\\DashboardController\n    // 创建一个新的事件类\n    php artisan make:event name\n    // 创建异常类\n    php artisan make:exception name\n    // 创建模型工厂类\n    php artisan make:factory name\n    // 创建一个队列任务文件\n    php artisan make:job \n    // 创建一个监听者类\n    php artisan make:listener name\n    // 创建一个新的邮件类\n    php artisan make:mail name\n    // 创建一个新的中间件类\n    php artisan make:middleware name\n    // 创建一个新的迁移文件\n     // --create     将被创建的数据表.\n     // --table      将被迁移的数据表.\n    php artisan make:migration [--create[=\"...\"]] [--table[=\"...\"]] name\n    // 创建一个新的 Eloquent 模型类\n    php artisan make:model User\n    php artisan make:model Models/User\n    // 新建一个消息通知类\n    php artisan make:notification TopicRepliedNotification\n    // 新建一个模型观察者类\n    php artisan make:observer UserObserver\n    // 创建授权策略\n    php artisan make:policy PostPolicy\n    // 创建一个新的服务提供者类\n    php artisan make:provider name\n    // 创建一个新的表单请求类\n    php artisan make:request name\n    // 创建一个 API 资源类\n    php artisan make:resource name\n    // 新建验证规则类\n    php artisan make:rule name\n    // 创建模型脚手架\n    // <name> 模型名称，如 Post\n    // -s, --schema=SCHEMA 表结构如：--schema=\"title:string\"\n    // -a, --validator[=VALIDATOR] 表单验证，如：--validator=\"title:required\"\n    // -l, --localization[=LOCALIZATION] 设置本地化信息，如：--localization=\"key:value\"\n    // -b, --lang[=LANG] 设置本地化语言 --lang=\"en\"\n    // -f, --form[=FORM] 使用 Illumintate/Html Form 来生成表单选项，默认为 false\n    // -p, --prefix[=PREFIX] 表结构前缀，默认 false\n    php artisan make:scaffold  [options] [--] <name>\n    // 生成数据填充类\n    php artisan make:seeder\n    // 生成测试类\n    php artisan make:test\n\n    // 数据库迁移\n     // --database   指定数据库连接（下同）\n     // --force      当处于生产环境时强制执行，不询问（下同）\n     // --path       指定单独迁移文件地址\n     // --pretend    把将要运行的 SQL 语句打印出来（下同）\n     // --seed       Seed 任务是否需要被重新运行（下同）\n    php artisan migrate [--database[=\"...\"]] [--force] [--path[=\"...\"]] [--pretend] [--seed]\n    // 创建迁移数据库表\n    php artisan migrate:install [--database[=\"...\"]]\n    // Drop 所有数据表并重新运行 Migration\n    php artisan migrate:fresh\n    // 重置并重新运行所有的 migrations\n     // --seeder     指定主 Seeder 的类名\n    php artisan migrate:refresh [--database[=\"...\"]] [--force] [--seed] [--seeder[=\"...\"]]\n    // 回滚所有的数据库迁移\n    php artisan migrate:reset [--database[=\"...\"]] [--force] [--pretend]\n    // 回滚最最近一次运行的迁移任务\n    php artisan migrate:rollback [--database[=\"...\"]] [--force] [--pretend]\n    // migrations 数据库表信息\n    php artisan migrate:status\n\n    // 为数据库消息通知创建一个表迁移类\n    php artisan notifications:table\n    // 清除缓存的 bootstrap 文件\n    php artisan optimize:clear\n    // 扩展包自动发现\n    php artisan package:discover\n\n    // 为队列数据库表创建一个新的迁移\n    php artisan queue:table\n    // 监听指定的队列\n     // --queue      被监听的队列\n     // --delay      给执行失败的任务设置延时时间 (默认为零: 0)\n     // --memory     内存限制大小，单位为 MB (默认为: 128)\n     // --timeout    指定任务运行超时秒数 (默认为: 60)\n     // --sleep      等待检查队列任务的秒数 (默认为: 3)\n     // --tries      任务记录失败重试次数 (默认为: 0)\n    php artisan queue:listen [--queue[=\"...\"]] [--delay[=\"...\"]] [--memory[=\"...\"]] [--timeout[=\"...\"]] [--sleep[=\"...\"]] [--tries[=\"...\"]] [connection]\n    // 查看所有执行失败的队列任务\n    php artisan queue:failed\n    // 为执行失败的数据表任务创建一个迁移\n    php artisan queue:failed-table\n    // 清除所有执行失败的队列任务\n    php artisan queue:flush\n    // 删除一个执行失败的队列任务\n    php artisan queue:forget\n    // 在当前的队列任务执行完毕后, 重启队列的守护进程\n    php artisan queue:restart\n    // 对指定 id 的执行失败的队列任务进行重试(id: 失败队列任务的 ID)\n    php artisan queue:retry id\n    // 指定订阅 Iron.io 队列的链接\n     // queue: Iron.io 的队列名称.\n     // url: 将被订阅的 URL.\n     // --type       指定队列的推送类型.\n    php artisan queue:subscribe [--type[=\"...\"]] queue url\n    // 处理下一个队列任务\n     // --queue      被监听的队列\n     // --daemon     在后台模式运行\n     // --delay      给执行失败的任务设置延时时间 (默认为零: 0)\n     // --force      强制在「维护模式下」运行\n     // --memory     内存限制大小，单位为 MB (默认为: 128)\n     // --sleep      当没有任务处于有效状态时, 设置其进入休眠的秒数 (默认为: 3)\n     // --tries      任务记录失败重试次数 (默认为: 0)\n    php artisan queue:work [--queue[=\"...\"]] [--daemon] [--delay[=\"...\"]] [--force] [--memory[=\"...\"]] [--sleep[=\"...\"]] [--tries[=\"...\"]] [connection]\n\n    // 生成路由缓存文件来提升路由效率\n    php artisan route:cache\n    // 移除路由缓存文件\n    php artisan route:clear\n    // 显示已注册过的路由\n    php artisan route:list\n\n    // 运行计划命令\n    php artisan schedule:run\n\n    // 为 session 数据表生成迁移文件\n    php artisan session:table\n    // 创建 \"public/storage\" 到 \"storage/app/public\" 的软链接\n    php artisan storage:link\n\n    // 从 vendor 的扩展包中发布任何可发布的资源\n     // --force        重写所有已存在的文件\n     // --provider     指定你想要发布资源文件的服务提供者\n     // --tag          指定你想要发布标记资源.\n    php artisan vendor:publish [--force] [--provider[=\"...\"]] [--tag[=\"...\"]]\n    php artisan tail [--path[=\"...\"]] [--lines[=\"...\"]] [connection]\n\n    // 缓存视图文件以提高效率\n    php artisan view:cache\n    // 清除视图文件缓存\n    php artisan view:clear\n","p":"cheatsheets/Artisan.html"},{"t":"Pagination","d":"# Pagination\n\n    // 自动处理分页逻辑\n    Model::paginate(15);\n    Model::where('cars', 2)->paginate(15);\n    // 使用简单模板 - 只有 \"上一页\" 或 \"下一页\" 链接\n    Model::where('cars', 2)->simplePaginate(15);\n    // 手动分页\n    Paginator::make($items, $totalItems, $perPage);\n    // 在页面打印分页导航栏\n    $variable->links();\n\n    // 获取当前页数据数量。\n    $results->count()\n    // 获取当前页页码。\n    $results->currentPage()\n    // 获取结果集中第一条数据的结果编号。\n    $results->firstItem()\n    // 获取分页器选项。\n    $results->getOptions()\n    // 创建分页 URL 范围。\n    $results->getUrlRange($start, $end)\n    // 是否有多页。\n    $results->hasMorePages()\n    // 获取结果集中最后一条数据的结果编号。\n    $results->lastItem()\n    // 获取最后一页的页码（在 `simplePaginate` 中无效）。\n    $results->lastPage()\n    // 获取下一页的 URL 。\n    $results->nextPageUrl()\n    // 当前而是否为第一页。\n    $results->onFirstPage()\n    // 每页的数据条数。\n    $results->perPage()\n    // 获取前一页的 URL。\n    $results->previousPageUrl()\n    // 数据总数（在 `simplePaginate` 无效）。\n    $results->total()\n    // 获取指定页的 URL。\n    $results->url($page)","p":"cheatsheets/Pagination.html"},{"t":"Lang","d":"# Lang\n\n    App::setLocale('en');\n    Lang::get('messages.welcome');\n    Lang::get('messages.welcome', array('foo' => 'Bar'));\n    Lang::has('messages.welcome');\n    Lang::choice('messages.apples', 10);\n    // Lang::get 的别名\n    trans('messages.welcome');\n    // Lang::choice 的别名\n    trans_choice('messages.apples',  10)\n    // 辅助函数\n    __('messages.welcome')","p":"cheatsheets/Lang.html"},{"t":"File","d":"# File\n\n    File::exists($path);\n    File::get($path, $lock = false);\n    // 加锁读取文件内容\n    File::sharedGet($path);\n    // 获取文件内容，不存在会抛出 FileNotFoundException 异常\n    File::getRequire($path);\n    // 获取文件内容, 仅能引入一次\n    File::requireOnce($file);\n    // 生成文件路径的 MD5 哈希\n    File::hash($path);\n    // 将内容写入文件\n    File::put($path, $contents, $lock = false);\n    // 写入文件，存在的话覆盖写入\n    File::replace($path, $content);\n    // 将内容添加在文件原内容前面\n    File::prepend($path, $data);\n    // 将内容添加在文件原内容后\n    File::append($path, $data);\n    // 修改路径权限\n    File::chmod($path, $mode = null);\n    // 通过给定的路径来删除文件\n    File::delete($paths);\n    // 将文件移动到新目录下\n    File::move($path, $target);\n    // 将文件复制到新目录下\n    File::copy($path, $target);\n    // 创建硬连接\n    File::link($target, $link);\n    // 从文件路径中提取文件名，不包含后缀\n    File::name($path);\n    // 从文件路径中提取文件名，包含后缀\n    File::basename($path);\n    // 获取文件路径名称\n    File::dirname($path);\n    // 从文件的路径地址提取文件的扩展\n    File::extension($path);\n    // 获取文件类型\n    File::type($path);\n    // 获取文件 MIME 类型\n    File::mimeType($path);\n    // 获取文件大小\n    File::size($path);\n    // 获取文件的最后修改时间\n    File::lastModified($path);\n    // 判断给定的路径是否是文件目录\n    File::isDirectory($directory);\n    // 判断给定的路径是否是可读取\n    File::isReadable($path);\n    // 判断给定的路径是否是可写入的\n    File::isWritable($path);\n    // 判断给定的路径是否是文件\n    File::isFile($file);\n    // 查找能被匹配到的路径名\n    File::glob($pattern, $flags = 0);\n    // 获取一个目录下的所有文件, 以数组类型返回\n    File::files($directory, $hidden = false);\n    // 获取一个目录下的所有文件 (递归).\n    File::allFiles($directory, $hidden = false);\n    // 获取一个目录内的目录\n    File::directories($directory);\n    // 创建一个目录\n    File::makeDirectory($path, $mode = 0755, $recursive = false, $force = false);\n    // 移动目录\n    File::moveDirectory($from, $to, $overwrite = false);\n    // 将文件夹从一个目录复制到另一个目录下\n    File::copyDirectory($directory, $destination, $options = null);\n    // 删除目录\n    File::deleteDirectory($directory, $preserve = false);\n    // 递归式删除目录\n    File::deleteDirectories($directory);\n    // 清空指定目录的所有文件和文件夹\n    File::cleanDirectory($directory);","p":"cheatsheets/File.html"},{"t":"Schema","d":"# Schema\n\n## 索引\n\n    $table->string('column')->unique();\n    $table->primary('column');\n    // 创建一个双主键\n    $table->primary(array('first', 'last'));\n    $table->unique('column');\n    $table->unique('column', 'key_name');\n    // 创建一个双唯一性索引\n    $table->unique(array('first', 'last'));\n    $table->unique(array('first', 'last'), 'key_name');\n    $table->index('column');\n    $table->index('column', 'key_name');\n    // 创建一个双索引\n    $table->index(array('first', 'last'));\n    $table->index(array('first', 'last'), 'key_name');\n    $table->dropPrimary(array('column'));\n    $table->dropPrimary('table_column_primary');\n    $table->dropUnique(array('column'));\n    $table->dropUnique('table_column_unique');\n    $table->dropIndex(array('column'));\n    $table->dropIndex('table_column_index');\n\n## 外键\n\n    $table->foreign('user_id')->references('id')->on('users');\n    $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade'|'restrict'|'set null'|'no action');\n    $table->foreign('user_id')->references('id')->on('users')->onUpdate('cascade'|'restrict'|'set null'|'no action');\n    $table->dropForeign(array('user_id'));\n    $table->dropForeign('posts_user_id_foreign');\n\n## 字段类型\n\n    // 自增\n    $table->increments('id');\n    $table->bigIncrements('id');\n\n    // 数字\n    $table->integer('votes');\n    $table->tinyInteger('votes');\n    $table->smallInteger('votes');\n    $table->mediumInteger('votes');\n    $table->bigInteger('votes');\n    $table->float('amount');\n    $table->double('column', 15, 8);\n    $table->decimal('amount', 5, 2);\n\n    // 字符串和文本\n    $table->char('name', 4);\n    $table->string('email');\n    $table->string('name', 100);\n    $table->text('description');\n    $table->mediumText('description');\n    $table->longText('description');\n\n    // 日期和时间\n    $table->date('created_at');\n    $table->dateTime('created_at');\n    $table->time('sunrise');\n    $table->timestamp('added_on');\n    // Adds created_at and updated_at columns\n     // 添加 created_at 和 updated_at 行\n    $table->timestamps();\n    $table->nullableTimestamps();\n\n    // 其它类型\n    $table->binary('data');\n    $table->boolean('confirmed');\n    // 为软删除添加 deleted_at 字段\n    $table->softDeletes();\n    $table->enum('choices', array('foo', 'bar'));\n    // 添加 remember_token 为 VARCHAR(100) NULL\n    $table->rememberToken();\n    // 添加整型的 parent_id 和字符串类型的 parent_type\n    $table->morphs('parent');\n    ->nullable()\n    ->default($value)\n    ->unsigned()\n    ->comment()","p":"cheatsheets/Schema.html"},{"t":"Auth","d":"# Auth\n\n## 用户认证\n\n    // 获取 Auth 对象，等同于 Auth Facade\n    auth();\n    // 判断当前用户是否已认证（是否已登录）\n    Auth::check();\n    // 判断当前用户是否未登录，与 check() 相反\n    Auth::guest();\n    // 自定义看守器 默认为 `web`\n    Auth::guard();\n    // 获取当前的认证用户\n    Auth::user();\n    // 获取当前的认证用户的 ID（未登录情况下会报错）\n    Auth::id();\n    // 通过给定的信息来尝试对用户进行认证（成功后会自动启动会话）\n    Auth::attempt(['email' => $email, 'password' => $password]);\n    // 通过 Auth::attempt() 传入 true 值来开启 '记住我' 功能\n    Auth::attempt($credentials, true);\n    // 注册尝试登录的事件监听器\n    Auth::attempting($callback);\n    // 只针对一次的请求来认证用户\n    Auth::once($credentials);\n    // 使用 ID 登录，无 Cookie 和会话登录\n    Auth::onceUsingId($id);\n    // 登录一个指定用户到应用上\n    Auth::login(User::find(1), $remember = false);\n    // 检测是否记住了登录\n    Auth::viaRemember();\n    // 登录指定用户 ID 的用户到应用上\n    Auth::loginUsingId(1, $remember = false);\n    // 使用户退出登录（清除会话）\n    Auth::logout();\n    // 清除当前用户的其他会话\n    Auth::logoutOtherDevices('password', $attribute = 'password');\n    // 验证用户凭证\n    Auth::validate($credentials);\n    // 使用 HTTP 的基本认证方式来认证\n    Auth::basic('username');\n    // 执行「HTTP Basic」登录尝试，只认证一次\n    Auth::onceBasic();\n    // 发送密码重置提示给用户\n    Password::remind($credentials, function($message, $user){});\n\n## 用户授权\n\n    // 定义权限\n    Gate::define('update-post', 'Class@method');\n    Gate::define('update-post', function ($user, $post) {...});\n    // 传递多个参数\n    Gate::define('delete-comment', function ($user, $post, $comment) {});\n    // 一次性的定义多个 Gate 方法\n    Gate::resource('posts',  'App\\Policies\\PostPolicy');\n    // 检测权限是否被定义\n    Gate::has('update-post');\n\n    // 检查权限\n    Gate::denies('update-post', $post);\n    Gate::allows('update-post', $post);\n    Gate::check('update-post', $post);\n    // 指定用户进行检查\n    Gate::forUser($user)->allows('update-post', $post);\n    // 在 User 模型下，使用 Authorizable trait\n    User::find(1)->can('update-post', $post);\n    User::find(1)->cannot('update-post', $post);\n    User::find(1)->cant('update-post', $post);\n\n    // 拦截所有检查，返回 bool\n    Gate::before(function ($user, $ability) {});\n    // 设置每一次验证的回调\n    Gate::after(function ($user, $ability, $result, $arguments) {});\n\n    // Blade 模板语法\n    @can('update-post', $post)\n    @endcan\n    // 支持 else 表达式\n    @can('update-post', $post)\n    @else\n    @endcan\n    // 无权限判断\n    @cannot\n    @endcannot\n\n    // 生成一个新的策略\n    php artisan make:policy PostPolicy\n    php artisan make:policy PostPolicy --model=Post\n    // `policy` 帮助函数\n    policy($post)->update($user, $post)\n\n    // 控制器授权\n    $this->authorize('update', $post);\n    // 指定用户 $user 授权\n    $this->authorizeForUser($user, 'update', $post);\n    // 控制器的 __construct 中授权资源控制器\n    $this->authorizeResource(Post::class,  'post');\n\n    // AuthServiceProvider->boot() 里修改策略自动发现的逻辑\n    Gate::guessPolicyNamesUsing(function ($modelClass) {\n        // 返回模型对应的策略名称，如：// 'App\\Model\\User' => 'App\\Policies\\UserPolicy',\n        return 'App\\Policies\\\\'.class_basename($modelClass).'Policy';\n    });\n\n    // 中间件指定模型实例\n    Route::put('/post/{post}',  function  (Post $post)  { ... })->middleware('can:update,post');\n    // 中间件未指定模型实例\n    Route::post('/post',  function  ()  { ... })->middleware('can:create,App\\Post');","p":"cheatsheets/Auth.html"},{"t":"Helper","d":"# Helper\n\n## 数组 & 对象\n\n    // 如果给定的键不存在于该数组，Arr::add 函数将给定的键值对加到数组中\n    Arr::add(['name' => 'Desk'], 'price', 100); \n    // >>> ['name' => 'Desk', 'price' => 100]\n    // 将数组的每一个数组折成单一数组\n    Arr::collapse([[1, 2, 3], [4, 5, 6]]);  \n    // >>> [1, 2, 3, 4, 5, 6]\n    // 函数返回两个数组，一个包含原本数组的键，另一个包含原本数组的值\n    Arr::divide(['key1' => 'val1', 'key2' =>'val2'])\n    // >>> [[\"key1\",\"key2\"],[\"val1\",\"val2\"]]\n    // 把多维数组扁平化成一维数组，并用「点」式语法表示深度\n    Arr::dot($array);\n    // 从数组移除给定的键值对\n    Arr::except($array, array('key'));\n    // 返回数组中第一个通过真值测试的元素\n    Arr::first($array, function($value, $key){}, $default);\n    // 将多维数组扁平化成一维\n     // ['Joe', 'PHP', 'Ruby'];\n    Arr::flatten(['name' => 'Joe', 'languages' => ['PHP', 'Ruby']]);\n    // 以「点」式语法从深度嵌套数组移除给定的键值对\n    Arr::forget($array, 'foo');\n    Arr::forget($array, 'foo.bar');\n    // 使用「点」式语法从深度嵌套数组取回给定的值\n    Arr::get($array, 'foo', 'default');\n    Arr::get($array, 'foo.bar', 'default');\n    // 使用「点」式语法检查给定的项目是否存在于数组中\n    Arr::has($array, 'products.desk');\n    // 从数组返回给定的键值对\n    Arr::only($array, array('key'));\n    // 从数组拉出一列给定的键值对\n    Arr::pluck($array, 'key');\n    // 从数组移除并返回给定的键值对\n    Arr::pull($array, 'key');\n    // 使用「点」式语法在深度嵌套数组中写入值\n    Arr::set($array, 'key', 'value');\n    Arr::set($array, 'key.subkey', 'value');\n    // 借由给定闭包结果排序数组\n    Arr::sort($array, function(){});\n    // 使用 sort 函数递归排序数组\n    Arr::sortRecursive();\n    // 使用给定的闭包过滤数组\n    Arr::where();\n    // 数组\"洗牌\"\n    Arr::shuffle($array,'I-AM-GROOT');\n    // 数组包裹(如果不是数组，就变成数组，如果是空的，返回[],否则返回原数据）\n    Arr::wrap($array);\n    // 返回给定数组的第一个元素\n    head($array);\n    // 返回给定数组的最后一个元素\n    last($array);\n\n## 路径\n\n    // 取得 app 文件夹的完整路径\n    app_path();\n    // 取得项目根目录的完整路径\n    base_path();\n    // 取得应用配置目录的完整路径\n    config_path();\n    // 取得应用数据库目录的完整路径\n    database_path();\n    // 取得加上版本号的 Elixir 文件路径\n    elixir();\n    // 取得 public 目录的完整路径\n    public_path();\n    // 取得 storage 目录的完整路径\n    storage_path();\n\n## 字符串\n\n    // 将给定的字符串转换成 驼峰式命名\n    Str::camel($value);\n    // 返回不包含命名空间的类名称\n    class_basename($class);\n    class_basename($object);\n    // 对给定字符串运行 htmlentities\n    e('<html>');\n    // 判断字符串开头是否为给定内容\n    Str::startsWith('Foo bar.', 'Foo');\n    // 判断给定字符串结尾是否为指定内容\n    Str::endsWith('Foo bar.', 'bar.');\n    // 将给定的字符串转换成 蛇形命名\n    Str::snake('fooBar');\n    // 将给定字符串转换成「首字大写命名」: FooBar\n    Str::studly('foo_bar');\n    // 根据你的本地化文件翻译给定的语句\n    trans('foo.bar');\n    // 根据后缀变化翻译给定的语句\n    trans_choice('foo.bar', $count);\n\n## URLs and Links\n\n    // 产生给定控制器行为网址\n    action('FooController@method', $parameters);\n    // 根据目前请求的协定（HTTP 或 HTTPS）产生资源文件网址\n    asset('img/photo.jpg', $title, $attributes);\n    // 根据 HTTPS 产生资源文件网址\n    secure_asset('img/photo.jpg', $title, $attributes);\n    // 产生给定路由名称网址\n    route($route, $parameters, $absolute = true);\n    // 产生给定路径的完整网址\n    url('path', $parameters = array(), $secure = null);\n\n## 其他\n\n    // 返回一个认证器实例。你可以使用它取代 Auth facade\n    auth()->user();\n    // 产生一个重定向回应让用户回到之前的位置\n    back();\n    // 使用 Bcrypt 哈希给定的数值。你可以使用它替代 Hash facade\n    bcrypt('my-secret-password');\n    // 从给定的项目产生集合实例\n    collect(['taylor', 'abigail']);\n    // 取得设置选项的设置值\n    config('app.timezone', $default);\n    // 产生包含 CSRF 令牌内容的 HTML 表单隐藏字段\n    {!! csrf_field() !!} \n    // 5.7+用这个\n    @csrf\n    // 取得当前 CSRF 令牌的内容\n    $token = csrf_token();\n    // 输出给定变量并结束脚本运行\n    dd($value);\n    // var_dump缩写（如果用dump-server,var_dump可能无效）\n    dump($value);\n    // 取得环境变量值或返回默认值\n    $env = env('APP_ENV');\n    $env = env('APP_ENV', 'production');\n    // 配送给定事件到所属的侦听器\n    event(new UserRegistered($user));\n    // 根据给定类、名称以及总数产生模型工厂建构器\n    $user = factory(App\\User::class)->make();\n    // 产生拟造 HTTP 表单动作内容的 HTML 表单隐藏字段\n    {!! method_field('delete') !!}\n    // 5.7+\n    @method('delete')\n    // 取得快闪到 session 的旧有输入数值\n    $value = old('value');\n    $value = old('value', 'default');\n    // 返回重定向器实例以进行 重定向\n     return redirect('/home');\n    // 取得目前的请求实例或输入的项目\n    $value = request('key', $default = null)\n    // 创建一个回应实例或获取一个回应工厂实例\n    return response('Hello World', 200, $headers);\n    // 可被用于取得或设置单一 session 内容\n    $value = session('key');\n    // 在没有传递参数时，将返回 session 实例\n    $value = session()->get('key');\n    session()->put('key', $value);\n    // 返回给定数值\n    value(function(){ return 'bar'; });\n    // 取得视图 实例\n    return view('auth.login');\n    // 返回给定的数值\n    $value = with(new Foo)->work();","p":"cheatsheets/Helper.html"},{"t":"Composer","d":"# Composer\n\n    composer create-project laravel/laravel folder_name\n    composer create-project laravel/laravel folder_name --prefer-dist \"5.8.*\"\n    composer install\n    composer install --prefer-dist\n    composer update\n    composer update package/name\n    composer dump-autoload [--optimize]\n    composer self-update\n    composer require [options] [--] [vendor/packages]...\n    // 全局安装\n    composer require global vendor/packages\n    // 罗列所有扩展包括版本信息\n    composer show","p":"cheatsheets/Composer.html"},{"t":"Environment","d":"# Environment\n\n    $environment = app()->environment();\n    $environment = App::environment();\n    // 判断当环境是否为 local\n    if (app()->environment('local')){}\n    // 判断当环境是否为 local 或 staging...\n    if (app()->environment(['local', 'staging'])){}","p":"cheatsheets/Environment.html"},{"t":"Log","d":"# Log\n\n## 记录 SQL 查询语句\n\n    // 开启 log\n    DB::connection()->enableQueryLog();\n    // 获取已执行的查询数组\n    DB::getQueryLog();","p":"cheatsheets/Log.html"},{"t":"URL","d":"# URL\n\n    URL::full();\n    URL::current();\n    URL::previous();\n    URL::to('foo/bar', $parameters, $secure);\n    URL::action('NewsController@item', ['id'=>123]);\n    // 需要在适当的命名空间内\n    URL::action('Auth\\AuthController@logout');\n    URL::action('FooController@method', $parameters, $absolute);\n    URL::route('foo', $parameters, $absolute);\n    URL::secure('foo/bar', $parameters);\n    URL::asset('css/foo.css', $secure);\n    URL::secureAsset('css/foo.css');\n    URL::isValidUrl('http://example.com');\n    URL::getRequest();\n    URL::setRequest($request);","p":"cheatsheets/URL.html"},{"t":"Event","d":"# Event\n\n    // 1. EventServiceProvider 类里的 $listen 属性\n    protected $listen =['App\\Events\\OrderShipped' => ['App\\Listeners\\SendShipmentNotification']];\n    // 2. 生成监听类\n    php artisan event:generate\n\n    // 触发命令\n    Event::dispatch($event, $payload = [], $halt = false);\n    event($event, $payload = [], $halt = false);\n    // 触发命令并等待\n    Event::until($event, $payload = []);\n    // 注册一个事件监听器.\n    // void listen(string|array $events, mixed $listener, int $priority)\n    Event::listen('App\\Events\\UserSignup', function($bar){});\n    Event::listen('event.*', function($bar){}); // 通配符监听器\n    Event::listen('foo.bar', 'FooHandler', 10);\n    Event::listen('foo.bar', 'BarHandler', 5);\n    // 你可以直接在处理逻辑中返回 false 来停止一个事件的传播.\n    Event::listen('foor.bar', function($event){ return false; });\n    Event::subscribe('UserEventHandler');\n    // 获取所有监听者\n    Event::getListeners($eventName);\n    // 移除事件及其对应的监听者\n    Event::forget($event);\n    // 将事件推入堆栈中等待执行\n    Event::push($event, $payload = []);\n    // 移除指定的堆栈事件\n    Event::flush($event);\n    // 移除所有堆栈中的事件\n    Event::forgetPushed();","p":"cheatsheets/Event.html"},{"t":"DB","d":"# DB\n\n## 基本使用\n\n    DB::connection('connection_name');\n    // 运行数据库查询语句\n    $results = DB::select('select * from users where id = ?', [1]);\n    $results = DB::select('select * from users where id = :id', ['id' => 1]);\n    // 运行普通语句\n    DB::statement('drop table users');\n    // 监听查询事件\n    DB::listen(function($sql, $bindings, $time) { code_here; });\n    // 数据库事务处理\n    DB::transaction(function() {\n        DB::table('users')->update(['votes' => 1]);\n        DB::table('posts')->delete();\n    });\n    DB::beginTransaction();\n    DB::rollBack();\n    DB::commit();\n\n    // 获取表前缀\n    DB::getTablePrefix()\n\n## 查询语句构造器 \n\n    // 取得数据表的所有行\n    DB::table('name')->get();\n    // 取数据表的部分数据\n    DB::table('users')->chunk(100, function($users) {\n      foreach ($users as $user) {\n          //\n      }\n    });\n    // 取回数据表的第一条数据\n    $user = DB::table('users')->where('name', 'John')->first();\n    DB::table('name')->first();\n    // 从单行中取出单列数据\n    $name = DB::table('users')->where('name', 'John')->pluck('name');\n    DB::table('name')->pluck('column');\n    // 取多行数据的「列数据」数组\n    $roles = DB::table('roles')->lists('title');\n    $roles = DB::table('roles')->lists('title', 'name');\n    // 指定一个选择字段\n    $users = DB::table('users')->select('name', 'email')->get();\n    $users = DB::table('users')->distinct()->get();\n    $users = DB::table('users')->select('name as user_name')->get();\n    // 添加一个选择字段到一个已存在的查询语句中\n    $query = DB::table('users')->select('name');\n    $users = $query->addSelect('age')->get();\n    // 使用 Where 运算符\n    $users = DB::table('users')->where('votes', '>', 100)->get();\n    $users = DB::table('users')\n                  ->where('votes', '>', 100)\n                  ->orWhere('name', 'John')\n                  ->get();\n    $users = DB::table('users')\n          ->whereBetween('votes', [1, 100])->get();\n    $users = DB::table('users')\n          ->whereNotBetween('votes', [1, 100])->get();\n    $users = DB::table('users')\n          ->whereIn('id', [1, 2, 3])->get();\n    $users = DB::table('users')\n          ->whereNotIn('id', [1, 2, 3])->get();\n    $users = DB::table('users')\n          ->whereNull('updated_at')->get();\n    DB::table('name')->whereNotNull('column')->get();\n    // 动态的 Where 字段\n    $admin = DB::table('users')->whereId(1)->first();\n    $john = DB::table('users')\n          ->whereIdAndEmail(2, 'john@doe.com')\n          ->first();\n    $jane = DB::table('users')\n          ->whereNameOrAge('Jane', 22)\n          ->first();\n    // Order By, Group By, 和 Having\n    $users = DB::table('users')\n          ->orderBy('name', 'desc')\n          ->groupBy('count')\n          ->having('count', '>', 100)\n          ->get();\n    DB::table('name')->orderBy('column')->get();\n    DB::table('name')->orderBy('column','desc')->get();\n    DB::table('name')->having('count', '>', 100)->get();\n    // 偏移 & 限制\n    $users = DB::table('users')->skip(10)->take(5)->get();\n\n## Joins \n\n    // 基本的 Join 声明语句\n    DB::table('users')\n        ->join('contacts', 'users.id', '=', 'contacts.user_id')\n        ->join('orders', 'users.id', '=', 'orders.user_id')\n        ->select('users.id', 'contacts.phone', 'orders.price')\n        ->get();\n    // Left Join 声明语句\n    DB::table('users')\n    ->leftJoin('posts', 'users.id', '=', 'posts.user_id')\n    ->get();\n    // select * from users where name = 'John' or (votes > 100 and title <> 'Admin')\n    DB::table('users')\n        ->where('name', '=', 'John')\n        ->orWhere(function($query) {\n            $query->where('votes', '>', 100)\n                  ->where('title', '<>', 'Admin');\n        })\n        ->get();\n\n## 聚合 \n\n    $users = DB::table('users')->count();\n    $price = DB::table('orders')->max('price');\n    $price = DB::table('orders')->min('price');\n    $price = DB::table('orders')->avg('price');\n    $total = DB::table('users')->sum('votes');\n\n## 原始表达句\n\n    $users = DB::table('users')\n                       ->select(DB::raw('count(*) as user_count, status'))\n                       ->where('status', '<>', 1)\n                       ->groupBy('status')\n                       ->get();\n    // 返回行\n    DB::select('select * from users where id = ?', array('value'));\n    DB::insert('insert into foo set bar=2');\n    DB::update('update foo set bar=2');\n    DB::delete('delete from bar');\n    // 返回 void\n    DB::statement('update foo set bar=2');\n    // 在声明语句中加入原始的表达式\n    DB::table('name')->select(DB::raw('count(*) as count, column2'))->get();\n\n\n## Inserts / Updates / Deletes / Unions / Pessimistic Locking\n\n    // 插入\n    DB::table('users')->insert(\n      ['email' => 'john@example.com', 'votes' => 0]\n    );\n    $id = DB::table('users')->insertGetId(\n      ['email' => 'john@example.com', 'votes' => 0]\n    );\n    DB::table('users')->insert([\n      ['email' => 'taylor@example.com', 'votes' => 0],\n      ['email' => 'dayle@example.com', 'votes' => 0]\n    ]);\n    // 更新\n    DB::table('users')\n              ->where('id', 1)\n              ->update(['votes' => 1]);\n    DB::table('users')->increment('votes');\n    DB::table('users')->increment('votes', 5);\n    DB::table('users')->decrement('votes');\n    DB::table('users')->decrement('votes', 5);\n    DB::table('users')->increment('votes', 1, ['name' => 'John']);\n    // 删除\n    DB::table('users')->where('votes', '<', 100)->delete();\n    DB::table('users')->delete();\n    DB::table('users')->truncate();\n    // 集合\n     // unionAll() 方法也是可供使用的，调用方式与 union 相似\n    $first = DB::table('users')->whereNull('first_name');\n    $users = DB::table('users')->whereNull('last_name')->union($first)->get();\n    // 消极锁\n    DB::table('users')->where('votes', '>', 100)->sharedLock()->get();\n    DB::table('users')->where('votes', '>', 100)->lockForUpdate()->get();","p":"cheatsheets/DB.html"},{"t":"UnitTest","d":"# UnitTest\n\n## 安装和运行\n\n    // 将其加入到 composer.json 并更新:\n    composer require \"phpunit/phpunit:4.0.*\"\n    // 运行测试 (在项目根目录下运行)\n    ./vendor/bin/phpunit\n\n## 断言\n\n    $this->assertTrue(true);\n    $this->assertEquals('foo', $bar);\n    $this->assertCount(1,$times);\n    $this->assertResponseOk();\n    $this->assertResponseStatus(403);\n    $this->assertRedirectedTo('foo');\n    $this->assertRedirectedToRoute('route.name');\n    $this->assertRedirectedToAction('Controller@method');\n    $this->assertViewHas('name');\n    $this->assertViewHas('age', $value);\n    $this->assertSessionHasErrors();\n    // 由单个 key 值来假定 session 有错误...\n    $this->assertSessionHasErrors('name');\n    // 由多个 key 值来假定 session 有错误...\n    $this->assertSessionHasErrors(array('name', 'age'));\n    $this->assertHasOldInput();\n\n## 访问路由\n\n    $response = $this->call($method, $uri, $parameters, $files, $server, $content);\n    $response = $this->callSecure('GET', 'foo/bar');\n    $this->session(['foo' => 'bar']);\n    $this->flushSession();\n    $this->seed();\n    $this->seed($connection);","p":"cheatsheets/UnitTest.html"},{"t":"Input","d":"# Input\n\n## 会话周期内 Input\n\n    // 清除会话周期内的输入\n    Input::flash();\n    // 清除会话周期内的指定输入\n    Input::flashOnly('foo', 'bar');\n    // 清除会话周期内的除了指定的其他输入\n    Input::flashExcept('foo', 'baz');\n    // 取回一个旧的输入条目\n    Input::old('key','default_value');\n\n## Files\n\n    // 使用一个已上传的文件\n    Input::file('filename');\n    // 判断文件是否已上传\n    Input::hasFile('filename');\n    // 获取文件属性\n    Input::file('name')->getRealPath();\n    Input::file('name')->getClientOriginalName();\n    Input::file('name')->getClientOriginalExtension();\n    Input::file('name')->getSize();\n    Input::file('name')->getMimeType();\n    // 移动一个已上传的文件\n    Input::file('name')->move($destinationPath);\n    // 移动一个已上传的文件，并设置新的名字\n    Input::file('name')->move($destinationPath, $fileName);","p":"cheatsheets/Input.html"},{"t":"Session","d":"# Session\n\n    Session::get('key');\n    // 从会话中读取一个条目\n     Session::get('key', 'default');\n    Session::get('key', function(){ return 'default'; });\n    // 获取 session 的 ID\n    Session::getId();\n    // 增加一个会话键值数据\n    Session::put('key', 'value');\n    // 将一个值加入到 session 的数组中\n    Session::push('foo.bar','value');\n    // 返回 session 的所有条目\n    Session::all();\n    // 检查 session 里是否有此条目\n    Session::has('key');\n    // 从 session 中移除一个条目\n    Session::forget('key');\n    // 从 session 中移除所有条目\n    Session::flush();\n    // 生成一个新的 session 标识符\n    Session::regenerate();\n    // 把一条数据暂存到 session 中\n    Session::flash('key', 'value');\n    // 清空所有的暂存数据\n    Session::reflash();\n    // 重新暂存当前暂存数据的子集\n    Session::keep(array('key1', 'key2'));","p":"cheatsheets/Session.html"},{"t":"Response","d":"# Response\n\n    return Response::make($contents);\n    return Response::make($contents, 200);\n    return Response::json(array('key' => 'value'));\n    return Response::json(array('key' => 'value'))\n    ->setCallback(Input::get('callback'));\n    return Response::download($filepath);\n    return Response::download($filepath, $filename, $headers);\n    // 创建一个回应且修改其头部信息的值\n    $response = Response::make($contents, 200);\n    $response->header('Content-Type', 'application/json');\n    return $response;\n    // 为回应附加上 cookie\n    return Response::make($content)\n    ->withCookie(Cookie::make('key', 'value'));","p":"cheatsheets/Response.html"},{"t":"Container","d":"# Container\n\n    App::bind('foo', function($app){ return new Foo; });\n    App::make('foo');\n    // 如果存在此类, 则返回\n    App::make('FooBar');\n    // 单例模式实例到服务容器中\n    App::singleton('foo', function(){ return new Foo; });\n    // 将已实例化的对象注册到服务容器中\n    App::instance('foo', new Foo);\n    // 注册绑定规则到服务容器中\n    App::bind('FooRepositoryInterface', 'BarRepository');\n    // 绑定基本值\n    App::when('App\\Http\\Controllers\\UserController')->needs('$variableName')->give($value);\n    // 标记\n    $this->app->tag(['SpeedReport',  'MemoryReport'],  'reports');\n    // 给应用注册一个服务提供者\n    App::register('FooServiceProvider');\n    // 监听容器对某个对象的解析\n    App::resolving(function($object){});\n    resolve('HelpSpot\\API');","p":"cheatsheets/Container.html"},{"t":"Security","d":"# Security\n\n## 哈希\n\n    Hash::make('secretpassword');\n    Hash::check('secretpassword', $hashedPassword);\n    Hash::needsRehash($hashedPassword);\n\n## 加密解密\n\n    Crypt::encrypt('secretstring');\n    Crypt::decrypt($encryptedString);\n    Crypt::setMode('ctr');\n    Crypt::setCipher($cipher);","p":"cheatsheets/Security.html"},{"t":"Queue","d":"# Queue\n\n    Queue::push('SendMail', array('message' => $message));\n    Queue::push('SendEmail@send', array('message' => $message));\n    Queue::push(function($job) use $id {});\n    // 在多个 workers 中使用相同的负载\n     Queue::bulk(array('SendEmail', 'NotifyUser'), $payload);\n    // 开启队列监听器\n    php artisan queue:listen\n    php artisan queue:listen connection\n    php artisan queue:listen --timeout=60\n    // 只处理第一个队列任务\n    php artisan queue:work\n    // 在后台模式启动一个队列 worker\n    php artisan queue:work --daemon\n    // 为失败的任务创建 migration 文件\n    php artisan queue:failed-table\n    // 监听失败任务\n    php artisan queue:failed\n    // 通过 id 删除失败的任务\n    php artisan queue:forget 5\n    // 删除所有失败任务\n    php artisan queue:flush\n    // 因为队列不会默认使用 PHP memory 参数，需要在队列指定(单位默认mb)\n    php artisan queue:work --memory=50","p":"cheatsheets/Queue.html"},{"t":"Validation","d":"# Validation\n\n## 验证规则\n\n    accepted // 待验证字段必须是 yes ， on ，1 或 true \n\n    active_url\n\n    after:YYYY-MM-DD // 待验证字段必须是给定的日期之后的值对应的日期。\n\n    // 待验证字段必须是给定的日期之前的值对应的日期。\n    before:YYYY-MM-DD\n\n    alpha // 待验证字段只能由字母组成。\n\n    alpha_dash // 待验证字段可能包含字母、数字，短破折号（-）和下划线（_）。\n\n    alpha_num // 待验证字段只能由字母和数字组成。\n\n    array // 待验证字段必须是有效的 PHP 数组。\n\n    between:1,10 // 验证字段的大小必须在给定的 min 和 max 之间。字符串、数字、数组和文件的计算方式都使用size方法\n\n    confirmed // 验证字段必须具有匹配字段 foo_confirmation \n\n    date // 根据 PHP strtotime 函数，验证的字段必须是有效的日期。\n\n    date_format:YYYY-MM-DD // 验证字段必须匹配给定的日期格式。\n\n    different:fieldname // 验证的字段值必须与字段 field 的值不同。\n\n    digits:value // 验证的字段必须为 numeric ，并且必须具有确切长度 _value_。\n\n    digits_between:min,max // 验证中的字段必须为数字，并且长度必须在给定的 min 和 max 之间。\n\n    boolean // 验证的字段必须可以转换为 Boolean 类型。\n\n    email // 验证的字段必须符合 e-mail 地址格式。\n\n    // 验证的字段必须存在于给定的数据库表中。\n    exists:table,column\n\n\n    image // 验证的文件必须是图片 (jpeg, png, bmp, gif, svg, or webp)\n\n    in:foo,bar,... // 验证字段必须包含在给定的值列表中。\n    not_in:foo,bar,... // 验证字段不能包含在给定的值的列表中\n\n    integer // 验证的字段必须是整数。\n    numeric // 验证字段必须为数值。\n    ip // 验证的字段必须是 IP 地址。\n    max:value // 验证中的字段必须小于或等于 value。字符串、数字、数组或是文件大小的计算方式都用 size规则。\n    min:value // 验证中的字段必须小于或等于 value。同 max\n    mimes:jpeg,png // 验证的文件必须具有与列出的其中一个扩展名相对应的 MIME 类型。\n    regex:[0-9] // 验证字段必须与给定的正则表达式匹配。\n\n    required // 验证的字段必须存在于输入数据中，而不是空。\n    required_if:field,value\n    required_with:foo,bar,...\n    required_with_all:foo,bar,...\n    required_without:foo,bar,...\n    required_without_all:foo,bar,...\n\n    same:field // 验证字段的值必须与给定字段的值相同。\n    size:value // 验证字段必须与给定值的大小一致。字符串(字符数),数字(数值),数组(count),文件(kb)\n\n    timezone // 验证字段必须为符合 timezone_identifiers_list 所定义的有效时区标识。\n    unique:table,column,except,idColumn // 验证字段在给定的数据库表中必须是唯一的。\n    url // 验证的字段必须是有效的 URL。","p":"cheatsheets/Validation.html"},{"t":"Config","d":"# Config\n\n    // config/app.php 里的 timezone 配置项\n    Config::get('app.timezone')\n    Config::get('app.timezone', 'default');\n    Config::set('database.default', 'sqlite');\n    // config() 等同于 Config Facade\n    config()->get('app.timezone');\n    config('app.timezone', 'default');   // get\n    config(['database.default' => 'sqlite']); // set","p":"cheatsheets/Config.html"},{"t":"Route","d":"# Route\n\n## 资源路由 \n\n    Route::resource('posts','PostsController');\n    // 资源路由器只允许指定动作通过\n    Route::resource('photo', 'PhotoController',['only' => ['index', 'show']]);\n    Route::resource('photo', 'PhotoController',['except' => ['update', 'destroy']]);\n    // 批量注册资源路由\n    Route::resources(['foo' => 'FooController', 'bar' => 'BarController'])\n    Route::resources(['foo' => 'FooController', 'bar' => 'BarController'], ['only' => ['index', 'show']])\n    Route::resources(['foo' => 'FooController', 'bar' => 'BarController'], ['except' => ['update', 'destroy']])\n\n## 触发错误 \n\n    App::abort(404);\n    $handler->missing(...) in ErrorServiceProvider::boot();\n    throw new NotFoundHttpException;\n\n## 路由参数 \n\n    Route::get('foo/{bar}', function($bar){});\n    Route::get('foo/{bar?}', function($bar = 'bar'){});\n\n## HTTP 请求方式\n\n    Route::any('foo', function(){});\n    Route::post('foo', function(){});\n    Route::put('foo', function(){});\n    Route::patch('foo', function(){});\n    Route::delete('foo', function(){});\n    // RESTful 资源控制器\n    Route::resource('foo', 'FooController');\n    // 为一个路由注册多种请求方式\n    Route::match(['get', 'post'], '/', function(){});\n\n## 安全路由 (TBD)\n\n    Route::get('foo', array('https', function(){}));\n\n## 路由约束\n\n    Route::get('foo/{bar}', function($bar){})\n            ->where('bar', '[0-9]+');\n    Route::get('foo/{bar}/{baz}', function($bar, $baz){})\n            ->where(array('bar' => '[0-9]+', 'baz' => '[A-Za-z]'))\n\n    // 设置一个可跨路由使用的模式\n     Route::pattern('bar', '[0-9]+')\n\n## HTTP 中间件 \n\n    // 为路由指定 Middleware\n    Route::get('admin/profile', ['middleware' => 'auth', function(){}]);\n    Route::get('admin/profile', function(){})->middleware('auth');\n\n## 命名路由\n\n    Route::currentRouteName();\n    Route::get('foo/bar', array('as' => 'foobar', function(){}));\n    Route::get('user/profile', [\n        'as' => 'profile', 'uses' => 'UserController@showProfile'\n    ]);\n    Route::get('user/profile', 'UserController@showProfile')->name('profile');\n    $url = route('profile');\n    $redirect = redirect()->route('profile');\n\n## 路由前缀\n\n    Route::group(['prefix' => 'admin'], function()\n    {\n        Route::get('users', function(){\n            return 'Matches The \"/admin/users\" URL';\n        });\n    });\n\n## 路由命名空间\n\n    // 此路由组将会传送 'Foo\\Bar' 命名空间\n    Route::group(array('namespace' => 'Foo\\Bar'), function(){})\n\n## 子域名路由\n\n    // {sub} 将在闭包中被忽略\n    Route::group(array('domain' => '{sub}.example.com'), function(){});","p":"cheatsheets/Route.html"},{"t":"Model","d":"# Model\n\n## 基础使用\n\n    // 定义一个 Eloquent 模型\n    class User extends Model {}\n    // 生成一个 Eloquent 模型\n    php artisan make:model User\n    // 生成一个 Eloquent 模型的时候，顺便生成迁移文件\n    php artisan make:model User --migration OR -m\n    // 生成一个 Eloquent 模型的时候，顺便生成迁移文件、控制器（或资源控制器）\n    php artisan make:model User -mc[r]\n    // 指定一个自定义的数据表名称\n    class User extends Model {\n      protected $table = 'my_users';\n    }\n\n## More\n\n    //新增一条新数据\n    Model::create(array('key' => 'value'));\n    // 通过属性找到第一条相匹配的数据或创造一条新数据\n    Model::firstOrCreate(array('key' => 'value'));\n    // 通过属性找到第一条相匹配的数据或实例化一条新数据\n    Model::firstOrNew(array('key' => 'value'));\n    // 通过属性找到相匹配的数据并更新，如果不存在即创建\n    Model::updateOrCreate(array('search_key' => 'search_value'), array('key' => 'value'));\n    // 使用属性的数组来填充一个模型, 用的时候要小心「Mass Assignment」安全问题 !\n    Model::fill($attributes);\n    Model::destroy(1);\n    Model::all();\n    Model::find(1);\n    // 使用双主键进行查找\n    Model::find(array('first', 'last'));\n    // 查找失败时抛出异常\n    Model::findOrFail(1);\n    // 使用双主键进行查找, 失败时抛出异常\n    Model::findOrFail(array('first', 'last'));\n    Model::where('foo', '=', 'bar')->get();\n    Model::where('foo', '=', 'bar')->first();\n    Model::where('foo', '=', 'bar')->exists();\n    // 动态属性查找\n    Model::whereFoo('bar')->first();\n    // 查找失败时抛出异常\n    Model::where('foo', '=', 'bar')->firstOrFail();\n    Model::where('foo', '=', 'bar')->count();\n    Model::where('foo', '=', 'bar')->delete();\n    // 输出原始的查询语句\n    Model::where('foo', '=', 'bar')->toSql();\n    Model::whereRaw('foo = bar and cars = 2', array(20))->get();\n    Model::on('connection-name')->find(1);\n    Model::with('relation')->get();\n    Model::all()->take(10);\n    Model::all()->skip(10);\n    // 默认的 Eloquent 排序是上升排序\n    Model::all()->sortBy('column');\n    Model::all()->sortDesc('column');\n\n    // 查询 json 数据\n    Model::where('options->language', 'en')->get(); # 字段是字符串\n    Model::whereJsonContains('options->languages', 'en')->get(); # 字段是数组\n    Model::whereJsonLength('options->languages', 0)->get(); # 字段长度为 0\n    Model::whereJsonDoesntContain('options->languages', 'en')->get(); # 字段是数组, 不包含\n\n## 软删除\n\n    Model::withTrashed()->where('cars', 2)->get();\n    // 在查询结果中包括带被软删除的模型\n    Model::withTrashed()->where('cars', 2)->restore();\n    Model::where('cars', 2)->forceDelete();\n    // 查找只带有软删除的模型\n    Model::onlyTrashed()->where('cars', 2)->get();\n\n## 模型关联\n\n    // 一对一 - User::phone()\n    return $this->hasOne('App\\Phone', 'foreign_key', 'local_key');\n    // 一对一 - Phone::user(), 定义相对的关联\n    return $this->belongsTo('App\\User', 'foreign_key', 'other_key');\n\n    // 一对多 - Post::comments()\n    return $this->hasMany('App\\Comment', 'foreign_key', 'local_key');\n    //  一对多 - Comment::post()\n    return $this->belongsTo('App\\Post', 'foreign_key', 'other_key');\n\n    // 多对多 - User::roles();\n    return $this->belongsToMany('App\\Role', 'user_roles', 'user_id', 'role_id');\n    // 多对多 - Role::users();\n    return $this->belongsToMany('App\\User');\n    // 多对多 - Retrieving Intermediate Table Columns\n    $role->pivot->created_at;\n    // 多对多 - 中介表字段\n    return $this->belongsToMany('App\\Role')->withPivot('column1', 'column2');\n    // 多对多 - 自动维护 created_at 和 updated_at 时间戳\n    return $this->belongsToMany('App\\Role')->withTimestamps();\n\n    // 远层一对多 - Country::posts(), 一个 Country 模型可能通过中介的 Users\n    // 模型关联到多个 Posts 模型(User::country_id)\n    return $this->hasManyThrough('App\\Post', 'App\\User', 'country_id', 'user_id');\n\n    // 多态关联 - Photo::imageable()\n    return $this->morphTo();\n    // 多态关联 - Staff::photos()\n    return $this->morphMany('App\\Photo', 'imageable');\n    // 多态关联 - Product::photos()\n    return $this->morphMany('App\\Photo', 'imageable');\n    // 多态关联 - 在 AppServiceProvider 中注册你的「多态对照表」\n    Relation::morphMap([\n        'Post' => App\\Post::class,\n        'Comment' => App\\Comment::class,\n    ]);\n\n    // 多态多对多关联 - 涉及数据库表: posts,videos,tags,taggables\n    // Post::tags()\n    return $this->morphToMany('App\\Tag', 'taggable');\n    // Video::tags()\n    return $this->morphToMany('App\\Tag', 'taggable');\n    // Tag::posts()\n    return $this->morphedByMany('App\\Post', 'taggable');\n    // Tag::videos()\n    return $this->morphedByMany('App\\Video', 'taggable');\n\n    // 查找关联\n    $user->posts()->where('active', 1)->get();\n    // 获取所有至少有一篇评论的文章...\n    $posts = App\\Post::has('comments')->get();\n    // 获取所有至少有三篇评论的文章...\n    $posts = Post::has('comments', '>=', 3)->get();\n    // 获取所有至少有一篇评论被评分的文章...\n    $posts = Post::has('comments.votes')->get();\n    // 获取所有至少有一篇评论相似于 foo% 的文章\n    $posts = Post::whereHas('comments', function ($query) {\n        $query->where('content', 'like', 'foo%');\n    })->get();\n\n    // 预加载\n    $books = App\\Book::with('author')->get();\n    $books = App\\Book::with('author', 'publisher')->get();\n    $books = App\\Book::with('author.contacts')->get();\n\n    // 延迟预加载\n    $books->load('author', 'publisher');\n\n    // 写入关联模型\n    $comment = new App\\Comment(['message' => 'A new comment.']);\n    $post->comments()->save($comment);\n    // Save 与多对多关联\n    $post->comments()->saveMany([\n        new App\\Comment(['message' => 'A new comment.']),\n        new App\\Comment(['message' => 'Another comment.']),\n    ]);\n    $post->comments()->create(['message' => 'A new comment.']);\n\n    // 更新「从属」关联\n    $user->account()->associate($account);\n    $user->save();\n    $user->account()->dissociate();\n    $user->save();\n\n    // 附加多对多关系\n    $user->roles()->attach($roleId);\n    $user->roles()->attach($roleId, ['expires' => $expires]);\n    // 从用户上移除单一身份...\n    $user->roles()->detach($roleId);\n    // 从用户上移除所有身份...\n    $user->roles()->detach();\n    $user->roles()->detach([1, 2, 3]);\n    $user->roles()->attach([1 => ['expires' => $expires], 2, 3]);\n\n    // 任何不在给定数组中的 IDs 将会从中介表中被删除。\n    $user->roles()->sync([1, 2, 3]);\n    // 你也可以传递中介表上该 IDs 额外的值：\n    $user->roles()->sync([1 => ['expires' => true], 2, 3]);\n\n\n## 事件\n\n    Model::retrieved(function($model){});\n    Model::creating(function($model){});\n    Model::created(function($model){});\n    Model::updating(function($model){});\n    Model::updated(function($model){});\n    Model::saving(function($model){});\n    Model::saved(function($model){});\n    Model::deleting(function($model){});\n    Model::deleted(function($model){});\n    Model::restoring(function($model){});\n    Model::restored(function($model){});\n    Model::observe(new FooObserver);\n\n## Eloquent  配置信息\n\n    // 关闭模型插入或更新操作引发的 「mass assignment」异常\n    Eloquent::unguard();\n    // 重新开启「mass assignment」异常抛出功能\n    Eloquent::reguard();","p":"cheatsheets/Model.html"},{"t":"Cache","d":"# Cache\n\n    // 获取缓存对象，约等于 Cache\n    cache()\n    // 注意 5.8 缓存单位为「秒」，之前版本为「分」\n    Cache::put('key', 'value', $seconds);\n    // 未设置过期时间将永久有效\n    Cache::put('key',  'value'); \n    Cache::add('key', 'value', $seconds);\n    Cache::forever('key', 'value');\n    Cache::sear('key', function(){ return 'value' });\n    Cache::remember('key', $seconds, function(){ return 'value' });\n    Cache::rememberForever('key', function(){ return 'value' });\n    Cache::forget('key');\n    Cache::has('key');\n    Cache::get('key');\n    Cache::get('key', 'default');\n    Cache::get('key', function(){ return 'default'; });\n    // 取到数据之后再删除它\n    Cache::pull('key'); \n    // 清空所有缓存\n    Cache::flush();\n    Cache::increment('key');\n    Cache::increment('key', $amount);\n    Cache::decrement('key');\n    Cache::decrement('key', $amount);\n    Cache::tags('my-tag')->put('key','value', $seconds);\n    Cache::tags('my-tag')->has('key');\n    Cache::tags('my-tag')->get('key');\n    Cache::tags(['people',  'artists'])->put('John',  $john,  $seconds);\n    Cache::tags('my-tag')->forget('key');\n    Cache::tags('my-tag')->flush();\n    Cache::tags(['people',  'authors'])->flush();\n    Cache::section('group')->put('key', $value);\n    Cache::section('group')->get('key');\n    Cache::section('group')->flush();\n    Cache::tags(['people',  'artists'])->put('John',  $john,  $seconds);\n    // 辅助函数\n    cache('key');\n    cache(['key' => 'value'], $seconds);\n    cache(['key' => 'value'], now()->addMinutes(10));\n    cache()->remember('users',  $seconds,  function() { return  User::all(); });\n    // 指定缓存存储\n    Cache::store('file')->get('foo');\n    Cache::store('redis')->put('name',  'Jack',  600);  // 10 分钟\n    // 事件\n    'Illuminate\\Cache\\Events\\CacheHit' => ['App\\Listeners\\LogCacheHit',],\n    'Illuminate\\Cache\\Events\\CacheMissed' => ['App\\Listeners\\LogCacheMissed',],\n    'Illuminate\\Cache\\Events\\KeyForgotten' => ['App\\Listeners\\LogKeyForgotten',],\n    'Illuminate\\Cache\\Events\\KeyWritten' => ['App\\Listeners\\LogKeyWritten',],","p":"cheatsheets/Cache.html"},{"t":"Cookie","d":"# Cookie\n\n    // 等于 Cookie\n    cookie();\n    request()->cookie('name');\n    Cookie::get('key');\n    Cookie::get('key', 'default');\n    // 创建一个永久有效的 cookie\n    Cookie::forever('key', 'value');\n    // 创建一个 N 分钟有效的 cookie\n    Cookie::make('key', 'value', 'minutes');\n    cookie('key', 'value', 'minutes');\n    // 在回应之前先积累 cookie，回应时统一返回\n    Cookie::queue('key', 'value', 'minutes');\n    // 移除 Cookie\n    Cookie::forget('key');\n    // 从 response 发送一个 cookie\n    $response = Response::make('Hello World');\n    $response->withCookie(Cookie::make('name', 'value', $minutes));\n    // 设置未加密 Cookie app/Http/Middleware/EncryptCookies.php\n    EncryptCookies->except = ['cookie_name_1'];","p":"cheatsheets/Cookie.html"},{"t":"Request","d":"# Request\n\n    //获取请求参数 form-data 与 raw 请求类型\n    request()->input();\n    // url: http://xx.com/aa/bb\n    Request::url();\n    // 路径: /aa/bb\n    Request::path();\n    // 获取请求 Uri: /aa/bb/?c=d\n    Request::getRequestUri();\n    // 返回用户的 IP\n    Request::ip();\n    // 获取 Uri: http://xx.com/aa/bb/?c=d\n    Request::getUri();\n    // 获取查询字符串: c=d\n    Request::getQueryString();\n    // 获取请求端口 (例如 80, 443 等等)\n    Request::getPort();\n    // 判断当前请求的 URI 是否可被匹配\n    Request::is('foo/*');\n    // 获取 URI 的分段值 (索引从 1 开始)\n    Request::segment(1);\n    // 从请求中取回头部信息\n    Request::header('Content-Type');\n    // 从请求中取回服务器变量\n    Request::server('PATH_INFO');\n    // 判断请求是否是 AJAX 请求\n    Request::ajax();\n    // 判断请求是否使用 HTTPS\n    Request::secure();\n    // 获取请求方法\n    Request::method();\n    // 判断请求方法是否是指定类型的\n    Request::isMethod('post');\n    // 获取原始的 POST 数据\n    Request::instance()->getContent();\n    // 获取请求要求返回的格式\n    Request::format();\n    // 判断 HTTP Content-Type 头部信息是否包含 */json\n    Request::isJson();\n    // 判断 HTTP Accept 头部信息是否为 application/json\n    Request::wantsJson();","p":"cheatsheets/Request.html"},{"t":"Redirect","d":"# Redirect\n\n    return Redirect::to('foo/bar');\n    return Redirect::to('foo/bar')->with('key', 'value');\n    return Redirect::to('foo/bar')->withInput(Input::get());\n    return Redirect::to('foo/bar')->withInput(Input::except('password'));\n    return Redirect::to('foo/bar')->withErrors($validator);\n    // 重定向到之前的请求\n    return Redirect::back();\n    // 重定向到命名路由（根据命名路由算出 URL）\n    return Redirect::route('foobar');\n    return Redirect::route('foobar', array('value'));\n    return Redirect::route('foobar', array('key' => 'value'));\n    // 重定向到控制器动作（根据控制器动作算出 URL）\n    return Redirect::action('FooController@index');\n    return Redirect::action('FooController@baz', array('value'));\n    return Redirect::action('FooController@baz', array('key' => 'value'));\n    // 跳转到目的地址，如果没有设置则使用默认值 foo/bar\n    return Redirect::intended('foo/bar');","p":"cheatsheets/Redirect.html"},{"t":"Mail","d":"# Mail\n\n## 消息\n\n    // 这些都能在 $message 实例中使用, 并可传入到 Mail::send() 或 Mail::queue()\n    $message->from('email@example.com', 'Mr. Example');\n    $message->sender('email@example.com', 'Mr. Example');\n    $message->returnPath('email@example.com');\n    $message->to('email@example.com', 'Mr. Example');\n    $message->cc('email@example.com', 'Mr. Example');\n    $message->bcc('email@example.com', 'Mr. Example');\n    $message->replyTo('email@example.com', 'Mr. Example');\n    $message->subject('Welcome to the Jungle');\n    $message->priority(2);\n    $message->attach('foo\\bar.txt', $options);\n    // 使用内存数据作为附件\n    $message->attachData('bar', 'Data Name', $options);\n    // 附带文件，并返回 CID\n    $message->embed('foo\\bar.txt');\n    $message->embedData('foo', 'Data Name', $options);\n    // 获取底层的 Swift Message 对象\n    $message->getSwiftMessage();\n","p":"cheatsheets/Mail.html"},{"t":"View","d":"# View\n\n    View::make('path/to/view');\n    View::make('foo/bar')->with('key', 'value');\n    View::make('foo/bar')->withKey('value');\n    View::make('foo/bar', array('key' => 'value'));\n    View::exists('foo/bar');\n    // 跨视图共享变量\n    View::share('key', 'value');\n    // 视图嵌套\n    View::make('foo/bar')->nest('name', 'foo/baz', $data);\n    // 注册一个视图构造器\n    View::composer('viewname', function($view){});\n    // 注册多个视图到一个视图构造器中\n    View::composer(array('view1', 'view2'), function($view){});\n    // 注册一个视图构造器类\n    View::composer('viewname', 'FooComposer');\n    View::creator('viewname', function($view){});","p":"cheatsheets/View.html"},{"t":"Blade","d":"# Blade\n\n## 包含和继承\n\n    // 扩展布局模板\n    @extends('layout.name')\n    // 区块占位\n    @yield('name')\n    // 第一种、直接填入扩展内容\n    @section('title',  'Page Title')\n    // 第二种、实现命名为 name 的区块（yield 占位的地方）\n    @section('sidebar')\n        // 继承父模板内容\n        @parent\n    @endsection\n    // 可继承内容区块\n    @section('sidebar')\n    @show\n    // 继承父模板内容（@show 的区块内容）\n    @parent\n    // 包含子视图\n    @include('view.name')\n    // 包含子视图，并传参\n    @include('view.name', ['key' => 'value']);\n    @includeIf('view.name',  ['some'  =>  'data'])\n    @includeWhen($boolean,  'view.name',  ['some'  =>  'data'])\n    // 包含给定视图数组中第一个存在的视图\n    @includeFirst(['custom.admin',  'admin'],  ['some'  =>  'data'])\n    // 加载本地化语句\n    @lang('messages.name')\n    @choice('messages.name', 1);\n    // 检查片断是否存在\n    @hasSection('navigation')\n            @yield('navigation')\n    @endif\n    // 迭代 jobs 数组并包含\n    @each('view.name',  $jobs,  'job')\n    @each('view.name',  $jobs,  'job',  'view.empty')\n    // 堆栈\n    @stack('scripts')\n    @push('scripts')\n        <script src=\"/example.js\"></script>\n    @endpush\n    // 栈顶插入\n    @prepend('scripts')\n    @endprepend\n    // 组件\n    @component('alert', ['foo' => 'bar'])\n        @slot('title')\n        @endslot\n    @endcomponent\n    // 注册别名 @alert(['type' => 'danger'])...@endalert\n    Blade::component('components.alert',  'alert');\n\n## 条件语句\n\n    @if (count($records) === 1)\n    @elseif  (count($records) > 1)\n    @else\n    @endif\n    // 登录情况下\n    @unless (Auth::check())\n    @endunless\n    // $records 被定义且不是  null...\n    @isset($records)\n    @endisset\n    // $records 为空...\n    @empty($records)\n    @endempty\n    // 此用户身份已验证...\n    @auth // 或 @auth('admin')\n    @endauth\n    // 此用户身份未验证...\n    @guest // 或 @guest('admin')\n    @endguest\n    @switch($i)\n        @case(1)\n            @break\n        @default\n            // 默认\n    @endswitch\n\n## 循环\n\n    // for 循环\n    @for ($i = 0; $i < 10; $i++)\n    @endfor\n    // foreach 迭代\n    @foreach ($users as $user)\n    @endforeach\n    // 迭代如果为空的话\n    @forelse ($users as $user)\n    @empty\n    @endforelse\n    // while 循环\n    @while (true)\n    @endwhile\n    // 终结循环\n    @continue\n    @continue($user->type  ==  1) // 带条件\n    // 跳过本次迭代\n    @break\n    @break($user->number  ==  5) // 带条件\n    // 循环变量\n    $loop->index        // 当前迭代的索引（从 0 开始计数）。\n    $loop->iteration    // 当前循环迭代 (从 1 开始计算）。\n    $loop->remaining    // 循环中剩余迭代的数量。\n    $loop->count        // 被迭代的数组元素的总数。\n    $loop->first        // 是否为循环的第一次迭代。\n    $loop->last         // 是否为循环的最后一次迭代。\n    $loop->depth        // 当前迭代的嵌套深度级数。\n    $loop->parent       // 嵌套循环中，父循环的循环变量\n\n## JavaScript 代码\n\n    // JS 框架，保留双大括号，以下会编译为 {{ name }}\n    @{{ name }}\n    // 大段 JavaScript 变量，verbatim 里模板引擎将不解析\n    @verbatim\n            Hello, {{ javascriptVariableName }}.\n    @endverbatim","p":"cheatsheets/Blade.html"},{"t":"String","d":"# String\n\n    // 将 UTF-8 的值直译为 ASCII 类型的值\n    Str::ascii($value)\n    Str::camel($value)\n    Str::contains($haystack, $needle)\n    Str::endsWith($haystack, $needles)\n    Str::finish($value, $cap)\n    Str::is($pattern, $value)\n    Str::length($value)\n    Str::limit($value, $limit = 100, $end = '...')\n    Str::lower($value)\n    Str::words($value, $words = 100, $end = '...')\n    Str::plural($value, $count = 2)\n    // 生成更加真实的 \"随机\" 字母数字字符串.\n    Str::random($length = 16)\n    // 生成一个 \"随机\" 字母数字字符串.\n    Str::quickRandom($length = 16)\n    Str::upper($value)\n    Str::title($value)\n    Str::singular($value)\n    Str::slug($title, $separator = '-')\n    Str::snake($value, $delimiter = '_')\n    Str::startsWith($haystack, $needles)\n    Str::studly($value)\n    Str::macro($name, $macro)","p":"cheatsheets/String.html"},{"t":"Collection","d":"# Collection\n\n    // 创建集合\n    collect([1, 2, 3]);\n    // 返回该集合所代表的底层数组：\n    $collection->all();\n    // 返回集合中所有项目的平均值：\n    collect([1, 1, 2, 4])->avg() // 2\n    $collection->average();\n    // 将集合拆成多个给定大小的较小集合：\n    collect([1, 2, 3, 4, 5])->chunk(2); // [[1,2], [3,4], [5]]\n    // 将多个数组组成的集合折成单一数组集合：\n    collect([[1],  [4,  5]])->collapse(); // [1, 4, 5]\n    // 将一个集合的值作为键，再将另一个集合作为值合并成一个集合\n    collect(['name', 'age'])->combine(['George', 29]);\n    // 将给定的 数组 或集合值追加到集合的末尾\n    collect(['PHP'])->concat(['Laravel']); // ['PHP', 'Laravel']\n    // 用来判断该集合是否含有指定的项目：\n    collect(['name' => 'Desk'])->contains('Desk'); // true\n    collect(['name' => 'Desk'])->contains('name',  'Desk'); // true\n    // 返回该集合内的项目总数：\n    $collection->count();\n    // 交叉连接指定数组或集合的值，返回所有可能排列的笛卡尔积\n    collect([1, 2])->crossJoin(['a', 'b']); // [[1, 'a'],[1, 'b'],[2, 'a'],[2, 'b']]\n    // dd($collection) 的另一个写法\n    collect(['John Doe', 'Jane Doe'])->dd();\n    // 返回原集合中存在而指定集合中不存在的值\n    collect([1,  2,  3])->diff([2, 4]); // [1, 3]\n    // 返回原集合不存在与指定集合的键 / 值对\n    collect(['color' => 'orange', 'remain' =>  6])->diffAssoc(['color' => 'yellow', 'remain' => 6, 'used' => 6]);  // ['color' => 'orange']\n    // 返回原集合中存在而指定集合中不存在键所对应的键 / 值对\n    collect(['one' => 10, 'two' => 20])->diffKeys(['two' => 2, 'four' => 4]); // ['one' => 10]\n    // 类似于 dd() 方法，但是不会中断\n    collect(['John Doe', 'Jane Doe'])->dump();\n    // 遍历集合中的项目，并将之传入给定的回调函数：\n    $collection = $collection->each(function ($item, $key) {});\n    // 验证集合中的每一个元素是否通过指定的条件测试\n    collect([1,  2])->every(function  ($value,  $key)  { return $value > 1; }); // false\n    // 返回集合中排除指定键的所有项目：\n    $collection->except(['price', 'discount']);\n    // 以给定的回调函数筛选集合，只留下那些通过判断测试的项目：\n    $filtered = $collection->filter(function ($item) {\n        return $item > 2;\n    });\n    // 返回集合中，第一个通过给定测试的元素：\n    collect([1, 2, 3, 4])->first(function ($key, $value) {\n        return $value > 2;\n    });\n    // 将多维集合转为一维集合：\n    $flattened = $collection->flatten();\n    // 将集合中的键和对应的数值进行互换：\n    $flipped = $collection->flip();\n    // 以键自集合移除掉一个项目：\n    $collection->forget('name');\n    // 返回含有可以用来在给定页码显示项目的新集合：\n    $chunk = $collection->forPage(2, 3);\n    // 返回给定键的项目。如果该键不存在，则返回 null：\n    $value = $collection->get('name');\n    // 根据给定的键替集合内的项目分组：\n    $grouped = $collection->groupBy('account_id');\n    // 用来确认集合中是否含有给定的键：\n    $collection->has('email');\n    // 用来连接集合中的项目\n    $collection->implode('product', ', ');\n    // 移除任何给定数组或集合内所没有的数值：\n    $intersect = $collection->intersect(['Desk', 'Chair', 'Bookcase']);\n    // 假如集合是空的，isEmpty 方法会返回 true：\n    collect([])->isEmpty();\n    // 以给定键的值作为集合项目的键：\n    $keyed = $collection->keyBy('product_id');\n    // 传入回调函数，该函数会返回集合的键的值：\n    $keyed = $collection->keyBy(function ($item) {\n        return strtoupper($item['product_id']);\n    });\n    // 返回该集合所有的键：\n    $keys = $collection->keys();\n    // 返回集合中，最后一个通过给定测试的元素：\n    $collection->last();\n    // 遍历整个集合并将每一个数值传入给定的回调函数：\n    $multiplied = $collection->map(function ($item, $key) {\n        return $item * 2;\n    });\n    // 返回给定键的最大值：\n    $max = collect([['foo' => 10], ['foo' => 20]])->max('foo');\n    $max = collect([1, 2, 3, 4, 5])->max();\n    // 将合并指定的数组或集合到原集合：\n    $merged = $collection->merge(['price' => 100, 'discount' => false]);\n    // 返回给定键的最小值：\n    $min = collect([['foo' => 10], ['foo' => 20]])->min('foo');\n    $min = collect([1, 2, 3, 4, 5])->min();\n    // 返回集合中指定键的所有项目：\n    $filtered = $collection->only(['product_id', 'name']);\n    // 获取所有集合中给定键的值：\n    $plucked = $collection->pluck('name');\n    // 移除并返回集合最后一个项目：\n    $collection->pop();\n    // 在集合前面增加一个项目：\n    $collection->prepend(0);\n    // 传递第二个参数来设置前置项目的键：\n    $collection->prepend(0, 'zero');\n    // 以键从集合中移除并返回一个项目：\n    $collection->pull('name');\n    // 附加一个项目到集合后面：\n    $collection->push(5);\n    // put 在集合内设置一个给定键和数值：\n    $collection->put('price', 100);\n    // 从集合中随机返回一个项目：\n    $collection->random();\n    // 传入一个整数到 random。如果该整数大于 1，则会返回一个集合：\n    $random = $collection->random(3);\n    // 会将每次迭代的结果传入到下一次迭代：\n    $total = $collection->reduce(function ($carry, $item) {\n        return $carry + $item;\n    });\n    // 以给定的回调函数筛选集合：\n    $filtered = $collection->reject(function ($item) {\n        return $item > 2;\n    });\n    // 反转集合内项目的顺序：\n    $reversed = $collection->reverse();\n    // 在集合内搜索给定的数值并返回找到的键：\n    $collection->search(4);\n    // 移除并返回集合的第一个项目：\n    $collection->shift();\n    // 随机排序集合的项目：\n    $shuffled = $collection->shuffle();\n    // 返回集合从给定索引开始的一部分切片：\n    $slice = $collection->slice(4);\n    // 对集合排序：\n    $sorted = $collection->sort();\n    // 以给定的键排序集合：\n    $sorted = $collection->sortBy('price');\n    // 移除并返回从指定的索引开始的一小切片项目：\n    $chunk = $collection->splice(2);\n    // 返回集合内所有项目的总和：\n    collect([1, 2, 3, 4, 5])->sum();\n    // 返回有着指定数量项目的集合：\n    $chunk = $collection->take(3);\n    // 将集合转换成纯 PHP 数组：\n    $collection->toArray();\n    // 将集合转换成 JSON：\n    $collection->toJson();\n    // 遍历集合并对集合内每一个项目调用给定的回调函数：\n    $collection->transform(function ($item, $key) {\n        return $item * 2;\n    });\n    // 返回集合中所有唯一的项目：\n    $unique = $collection->unique();\n    // 返回键重设为连续整数的的新集合：\n    $values = $collection->values();\n    // 以一对给定的键／数值筛选集合：\n    $filtered = $collection->where('price', 100);\n    // 将集合与给定数组同样索引的值合并在一起：\n    $zipped = $collection->zip([100, 200]);\n    //把集合放到回调参数中并返回回调的结果:\n    collect([1, 2, 3])->pipe(function ($collection) {\n        return $collection->sum();\n    });//6","p":"cheatsheets/Collection.html"},{"t":"Storage","d":"# Storage\n\n    // 写入文件\n    Storage::put('avatars/1', $fileContents);\n    // 指定磁盘\n    Storage::disk('local')->put('file.txt', 'Contents');\n    Storage::get('file.jpg');\n    Storage::exists('file.jpg');\n    Storage::download('file.jpg',  $name,  $headers);\n    Storage::url('file.jpg');\n    Storage::temporaryUrl('file.jpg', now()->addMinutes(5));\n    Storage::size('file.jpg');\n    Storage::lastModified('file.jpg');\n    // 自动为文件名生成唯一的ID...  \n    Storage::putFile('photos',  new  File('/path/to/photo'));\n    // 手动指定文件名...  \n    Storage::putFileAs('photos', new  File('/path/to/photo'), 'photo.jpg');\n    Storage::prepend('file.log', 'Prepended Text');\n    Storage::append('file.log', 'Appended Text');\n    Storage::copy('old/file.jpg', 'new/file.jpg');\n    Storage::move('old/file.jpg', 'new/file.jpg');\n    Storage::putFileAs('avatars', $request->file('avatar'), Auth::id());\n    // 「可见性」是对多个平台的文件权限的抽象\n    Storage::getVisibility('file.jpg');\n    Storage::setVisibility('file.jpg',  'public')\n    Storage::delete('file.jpg');\n    Storage::delete(['file.jpg',  'file2.jpg']);\n    // 获取目录下的所有的文件\n    Storage::files($directory);\n    Storage::allFiles($directory);\n    // 获取目录下的所有目录\n    Storage::directories($directory);\n    Storage::allDirectories($directory);\n    // 创建目录\n    Storage::makeDirectory($directory);\n    // 删除目录\n    Storage::deleteDirectory($directory);","p":"cheatsheets/Storage.html"}]